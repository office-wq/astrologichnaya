// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
const translations = {
    uk: {
        'page-title': 'üåü –û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á | –í–µ–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç',
        'nav-brand': 'üåü –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∞',
        'nav-home': '–ì–æ–ª–æ–≤–Ω–∞',
        'nav-services': '–ü–æ—Å–ª—É–≥–∏',
        'nav-about': '–ü—Ä–æ –º–µ–Ω–µ',
        'nav-contact': '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
        'hero-title': '–û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á | –ê—Å—Ç—Ä–æ–ª–æ–≥-–î—ñ–≤–∞',
        'hero-motto-1': '–ß—ñ—Ç–∫–æ. –¢–æ—á–Ω–æ. –õ–æ–≥—ñ—á–Ω–æ. –ö–æ—Ä–∏—Å–Ω–æ.',
        'hero-motto-2': '–Ø-–û–∫—Å–∞–Ω–∞',
        'hero-subtitle': '–í–µ–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç',
        'hero-description': '–ê–≤—Ç–æ—Ä YouTube-–∫–∞–Ω–∞–ª–∞ ¬´–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É!¬ª, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —è –ø—É–±–ª–∏–∫—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ, —Å–±—ã–≤–∞—é—â–∏–µ—Å—è —Å –ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –¥–µ–ª—é—Å—å –¥—Ä—É–≥–æ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.',
        'services-title': '–ú–æ—ó –ø–æ—Å–ª—É–≥–∏',
        'service-1-title': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è',
        'service-1-description': '–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–æ—ó –Ω–∞—Ç–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏ –∑ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏',
        'service-1-price': '50‚Ç¨',
        'service-2-title': '–ö—É—Ä—Å ¬´–Ø-–∞—Å—Ç—Ä–æ–ª–æ–≥¬ª',
        'service-2-description': '–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –≤–µ–¥–∏—á–Ω—ñ–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—ó –∑ –Ω—É–ª—è',
        'service-2-price': '300‚Ç¨',
        'service-3-title': '–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑–∏',
        'service-3-description': '–©–æ–º—ñ—Å—è—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –¥–ª—è –≤—Å—ñ—Ö –∑–Ω–∞–∫—ñ–≤ –∑–æ–¥—ñ–∞–∫—É',
        'service-3-price': '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ',
        'about-title': '–ü—Ä–æ –º–µ–Ω–µ',
        'about-content': '–í–µ–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç –û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á. –ê–≤—Ç–æ—Ä YouTube-–∫–∞–Ω–∞–ª–∞ ¬´–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É!¬ª, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —è –ø—É–±–ª–∏–∫—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ, —Å–±—ã–≤–∞—é—â–∏–µ—Å—è —Å –ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –¥–µ–ª—é—Å—å –¥—Ä—É–≥–æ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ —è —Å–æ–∑–¥–∞–ª–∞ –∫—É—Ä—Å –ø–æ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ ¬´–Ø-–∞—Å—Ç—Ä–æ–ª–æ–≥¬ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–∂–µ —Ç–µ, –∫—Ç–æ —É–∂–µ —É—á–∏–ª—Å—è –≤ –¥—Ä—É–≥–∏—Ö —à–∫–æ–ª–∞—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.',
        'contact-title': '–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é',
        'contact-description': '–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å—ñ–± –∑–≤\'—è–∑–∫—É',
        'form-name': '–í–∞—à–µ —ñ–º\'—è',
        'form-email': '–í–∞—à email',
        'form-message': '–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
        'form-submit': '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏',
        'footer-copyright': '¬© 2025 –û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.'
    },
    en: {
        'page-title': 'üåü Oksana Semenovich | Vedic Astrologer-Forecaster',
        'nav-brand': 'üåü Astrological Shop',
        'nav-home': 'Home',
        'nav-services': 'Services',
        'nav-about': 'About',
        'nav-contact': 'Contact',
        'hero-title': 'Oksana Semenovich | Astrologer-Virgo',
        'hero-motto-1': 'Clear. Precise. Logical. Useful.',
        'hero-motto-2': 'I-Oksana',
        'hero-subtitle': 'Vedic Astrologer-Forecaster',
        'hero-description': 'Author of the YouTube channel "Astrology is accessible to everyone!", where every month I publish accessible, amazingly accurate astrological forecasts and share other useful and interesting information about astrology.',
        'services-title': 'My Services',
        'service-1-title': 'Personal Consultation',
        'service-1-description': 'Detailed analysis of your natal chart with practical recommendations',
        'service-1-price': '50‚Ç¨',
        'service-2-title': 'Course "I-Astrologer"',
        'service-2-description': 'Complete training in Vedic astrology from scratch',
        'service-2-price': '300‚Ç¨',
        'service-3-title': 'Astrological Forecasts',
        'service-3-description': 'Monthly forecasts for all zodiac signs',
        'service-3-price': 'Free',
        'about-title': 'About Me',
        'about-content': 'Vedic astrologer-forecaster Oksana Semenovich. Author of the YouTube channel "Astrology is accessible to everyone!", where every month I publish accessible, amazingly accurate astrological forecasts and share other useful and interesting information about astrology. Based on my practical experience, I created a course in Vedic astrology "I-Astrologer", which was highly appreciated even by those who had already studied in other astrology schools.',
        'contact-title': 'Contact Me',
        'contact-description': 'Choose a convenient way to contact me',
        'form-name': 'Your name',
        'form-email': 'Your email',
        'form-message': 'Your message',
        'form-submit': 'Send',
        'footer-copyright': '¬© 2025 Oksana Semenovich. All rights reserved.'
    },
    pl: {
        'page-title': 'üåü Oksana Semenovich | Astrolog Wedyjski-Prognostyk',
        'nav-brand': 'üåü Sklep Astrologiczny',
        'nav-home': 'Strona g≈Ç√≥wna',
        'nav-services': 'Us≈Çugi',
        'nav-about': 'O mnie',
        'nav-contact': 'Kontakt',
        'hero-title': 'Oksana Semenovich | Astrolog-Panna',
        'hero-motto-1': 'Jasno. Dok≈Çadnie. Logicznie. U≈ºytecznie.',
        'hero-motto-2': 'Ja-Oksana',
        'hero-subtitle': 'Astrolog Wedyjski-Prognostyk',
        'hero-description': 'Autorka kana≈Çu YouTube "Astrologia dostƒôpna dla ka≈ºdego!", gdzie co miesiƒÖc publikujƒô dostƒôpne, zadziwiajƒÖco dok≈Çadne prognozy astrologiczne i dzielƒô siƒô innymi przydatnymi i interesujƒÖcymi informacjami o astrologii.',
        'services-title': 'Moje us≈Çugi',
        'service-1-title': 'Konsultacja osobista',
        'service-1-description': 'Szczeg√≥≈Çowa analiza twojej karty natalnej z praktycznymi zaleceniami',
        'service-1-price': '50‚Ç¨',
        'service-2-title': 'Kurs "Ja-Astrolog"',
        'service-2-description': 'Kompletne szkolenie z astrologii wedyjskiej od podstaw',
        'service-2-price': '300‚Ç¨',
        'service-3-title': 'Prognozy astrologiczne',
        'service-3-description': 'Miesiƒôczne prognozy dla wszystkich znak√≥w zodiaku',
        'service-3-price': 'Za darmo',
        'about-title': 'O mnie',
        'about-content': 'Astrolog wedyjski-prognostyk Oksana Semenovich. Autorka kana≈Çu YouTube "Astrologia dostƒôpna dla ka≈ºdego!", gdzie co miesiƒÖc publikujƒô dostƒôpne, zadziwiajƒÖco dok≈Çadne prognozy astrologiczne i dzielƒô siƒô innymi przydatnymi i interesujƒÖcymi informacjami o astrologii. Na podstawie mojego praktycznego do≈õwiadczenia stworzy≈Çam kurs astrologii wedyjskiej "Ja-Astrolog", kt√≥ry zosta≈Ç wysoko oceniony nawet przez tych, kt√≥rzy ju≈º uczyli siƒô w innych szko≈Çach astrologii.',
        'contact-title': 'Skontaktuj siƒô ze mnƒÖ',
        'contact-description': 'Wybierz wygodny dla siebie spos√≥b kontaktu',
        'form-name': 'Twoje imiƒô',
        'form-email': 'Tw√≥j email',
        'form-message': 'Twoja wiadomo≈õƒá',
        'form-submit': 'Wy≈õlij',
        'footer-copyright': '¬© 2025 Oksana Semenovich. Wszelkie prawa zastrze≈ºone.'
    },
    ru: {
        'page-title': 'üåü –û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á | –í–µ–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç',
        'nav-brand': 'üåü –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è',
        'nav-home': '–ì–ª–∞–≤–Ω–∞—è',
        'nav-services': '–£—Å–ª—É–≥–∏',
        'nav-about': '–û–±–æ –º–Ω–µ',
        'nav-contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        'hero-title': '–û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á | –ê—Å—Ç—Ä–æ–ª–æ–≥-–î–µ–≤–∞',
        'hero-motto-1': '–ß–µ—Ç–∫–æ. –¢–æ—á–Ω–æ. –õ–æ–≥–∏—á–Ω–æ. –ü–æ–ª–µ–∑–Ω–æ.',
        'hero-motto-2': '–Ø-–û–∫—Å–∞–Ω–∞',
        'hero-subtitle': '–í–µ–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç',
        'hero-description': '–ê–≤—Ç–æ—Ä YouTube-–∫–∞–Ω–∞–ª–∞ ¬´–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É!¬ª, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —è –ø—É–±–ª–∏–∫—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ, —Å–±—ã–≤–∞—é—â–∏–µ—Å—è —Å –ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –¥–µ–ª—é—Å—å –¥—Ä—É–≥–æ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.',
        'services-title': '–ú–æ–∏ —É—Å–ª—É–≥–∏',
        'service-1-title': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        'service-1-description': '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏',
        'service-1-price': '50‚Ç¨',
        'service-2-title': '–ö—É—Ä—Å ¬´–Ø-–∞—Å—Ç—Ä–æ–ª–æ–≥¬ª',
        'service-2-description': '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ —Å –Ω—É–ª—è',
        'service-2-price': '300‚Ç¨',
        'service-3-title': '–ê—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã',
        'service-3-description': '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞',
        'service-3-price': '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
        'about-title': '–û–±–æ –º–Ω–µ',
        'about-content': '–í–µ–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç –û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á. –ê–≤—Ç–æ—Ä YouTube-–∫–∞–Ω–∞–ª–∞ ¬´–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É!¬ª, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —è –ø—É–±–ª–∏–∫—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ, —Å–±—ã–≤–∞—é—â–∏–µ—Å—è —Å –ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –¥–µ–ª—é—Å—å –¥—Ä—É–≥–æ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ —è —Å–æ–∑–¥–∞–ª–∞ –∫—É—Ä—Å –ø–æ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ ¬´–Ø-–∞—Å—Ç—Ä–æ–ª–æ–≥¬ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–∂–µ —Ç–µ, –∫—Ç–æ —É–∂–µ —É—á–∏–ª—Å—è –≤ –¥—Ä—É–≥–∏—Ö —à–∫–æ–ª–∞—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.',
        'contact-title': '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π',
        'contact-description': '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏',
        'form-name': '–í–∞—à–µ –∏–º—è',
        'form-email': '–í–∞—à email',
        'form-message': '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'form-submit': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
        'footer-copyright': '¬© 2025 –û–∫—Å–∞–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∏—á. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.'
    }
};

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
function detectBrowserLanguage() {
    const browserLang = navigator.language || navigator.userLanguage;
    const lang = browserLang.split('-')[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å (ru, uk, en, pl)

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    if (lang === 'ru') {
        return 'en'; // –†—É—Å—Å–∫–∏–π –±—Ä–∞—É–∑–µ—Ä -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–∞–π—Ç
    } else if (lang === 'uk') {
        return 'uk'; // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –±—Ä–∞—É–∑–µ—Ä -> —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Å–∞–π—Ç
    } else if (lang === 'pl') {
        return 'pl'; // –ü–æ–ª—å—Å–∫–∏–π –±—Ä–∞—É–∑–µ—Ä -> –ø–æ–ª—å—Å–∫–∏–π —Å–∞–π—Ç
    } else {
        return 'en'; // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–∞–π—Ç
    }
}

// –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
let currentLang = detectBrowserLanguage();

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
function changeLanguage(lang) {
    currentLang = lang;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === lang) {
            btn.classList.add('active');
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (translations[lang] && translations[lang]['page-title']) {
        document.title = translations[lang]['page-title'];
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-translate
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        
        if (translations[lang] && translations[lang][key]) {
            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                element.placeholder = translations[lang][key];
            } else {
                element.textContent = translations[lang][key];
            }
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—â—É—é—Å—è —Ç–∞–±–ª–∏—á–∫—É —Å –¥–µ–≤–∏–∑–∞–º–∏
    updateMottoCard(lang);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—â–µ–π—Å—è —Ç–∞–±–ª–∏—á–∫–∏ —Å –¥–µ–≤–∏–∑–∞–º–∏
function updateMottoCard(lang) {
    const mottoCard = document.querySelector('.motto-card');
    if (mottoCard) {
        const front = mottoCard.querySelector('.motto-front');
        const back = mottoCard.querySelector('.motto-back');
        
        if (front) front.textContent = translations[lang]['hero-motto-1'];
        if (back) back.textContent = translations[lang]['hero-motto-2'];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const lang = this.getAttribute('data-lang');
            changeLanguage(lang);
        });
    });
    
    console.log('TEST: Before changeLanguage call');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    changeLanguage(currentLang);
    console.log('TEST: After changeLanguage call');
    
    console.log('Starting component initialization...');
    console.log('About to enter try-catch block...');
    
    try {
        console.log('Entered try block successfully');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—â—É—é—Å—è —Ç–∞–±–ª–∏—á–∫—É
        console.log('Calling initMottoCard...');
        initMottoCard();
        console.log('initMottoCard completed');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        console.log('Initializing FormHandler...');
        new FormHandler();
        console.log('Initializing StarMap...');
        new StarMap();
        console.log('Initializing MagicParticles...');
        new MagicParticles();
        console.log('Initializing TarotCards...');
        window.tarotInstance = new TarotCards();
        console.log('Initializing ZodiacWheel...');
        new ZodiacWheel();
        console.log('Initializing FloatingSymbols...');
        new FloatingSymbols();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        console.log('Initializing mobile navigation...');
        initMobileNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
        console.log('Initializing smooth scrolling...');
        initSmoothScrolling();
        
        console.log('All components initialized!');
    } catch (error) {
        console.error('Error during component initialization:', error);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initMobileNavigation() {
    const navToggle = document.querySelector('.nav-toggle');
    const navMenu = document.querySelector('.nav-menu');
    
    if (navToggle && navMenu) {
        navToggle.addEventListener('click', function() {
            this.classList.toggle('active');
            navMenu.classList.toggle('active');
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        navMenu.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
                navToggle.classList.remove('active');
                navMenu.classList.remove('active');
            });
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!navToggle.contains(e.target) && !navMenu.contains(e.target)) {
                navToggle.classList.remove('active');
                navMenu.classList.remove('active');
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function initSmoothScrolling() {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —è–∫–æ—Ä—è–º–∏
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö–µ–¥–µ—Ä–∞
                setTimeout(() => {
                    window.scrollBy({
                        top: -80,
                        behavior: 'smooth'
                    });
                }, 100);
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—â–µ–π—Å—è —Ç–∞–±–ª–∏—á–∫–∏
function initMottoCard() {
    const mottoCard = document.querySelector('.motto-card');
    console.log('Motto card found:', mottoCard);
    
    if (mottoCard) {
        let autoFlipTimer;
        let returnTimer;
        
        console.log('Initializing motto card flip functionality');
        
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        mottoCard.addEventListener('mouseenter', function() {
            console.log('Mouse entered, flipping card');
            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞
            if (returnTimer) {
                clearTimeout(returnTimer);
                returnTimer = null;
            }
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
            this.classList.add('flipped');
            console.log('Card flipped, classes:', this.className);
        });
        
        // –ü—Ä–∏ —É–±–∏—Ä–∞–Ω–∏–∏ –º—ã—à–∏ - —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
        mottoCard.addEventListener('mouseleave', function() {
            console.log('Mouse left, setting return timer');
            returnTimer = setTimeout(() => {
                console.log('Return timer fired, unflipping card');
                this.classList.remove('flipped');
                console.log('Card unflipped, classes:', this.className);
            }, 6000);
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —Å–µ–∫—É–Ω–¥
        autoFlipTimer = setInterval(() => {
            // –ï—Å–ª–∏ –º—ã—à—å –Ω–µ –Ω–∞–≤–µ–¥–µ–Ω–∞, —Ç–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            if (!mottoCard.matches(':hover')) {
                console.log('Auto flip timer fired, toggling card');
                mottoCard.classList.toggle('flipped');
                console.log('Card auto-flipped, classes:', mottoCard.className);
            }
        }, 6000);
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        mottoCard.addEventListener('remove', () => {
            if (autoFlipTimer) clearInterval(autoFlipTimer);
            if (returnTimer) clearTimeout(returnTimer);
        });
        
        console.log('Motto card initialization complete');
    } else {
        console.error('Motto card not found!');
    }
}


// Form Handler
class FormHandler {
    constructor() {
        this.form = document.getElementById('contactForm');
        this.modal = document.getElementById('successModal');
        this.init();
    }
    
    init() {
        if (this.form) {
            this.form.addEventListener('submit', (e) => this.handleSubmit(e));
        }
        
        if (this.modal) {
            this.bindModalEvents();
        }
    }
    
    async handleSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(this.form);
        const data = Object.fromEntries(formData);
        
        // Show loading state
        const submitBtn = this.form.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = '–ù–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è...';
        submitBtn.disabled = true;
        
        try {
            // Simulate API call
            await this.simulateApiCall(data);
            
            // Show success modal
            this.showModal();
            
            // Reset form
            this.form.reset();
            
        } catch (error) {
            console.error('Form submission error:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } finally {
            // Restore button state
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        }
    }
    
    async simulateApiCall(data) {
        // Simulate network delay
        return new Promise((resolve) => {
            setTimeout(() => {
                console.log('Form data submitted:', data);
                resolve({ success: true });
            }, 1500);
        });
    }
    
    showModal() {
        if (this.modal) {
            this.modal.style.display = 'block';
        }
    }
    
    bindModalEvents() {
        const closeBtn = this.modal.querySelector('.close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                this.modal.style.display = 'none';
            });
        }
        
        // Close modal when clicking outside
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) {
                this.modal.style.display = 'none';
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.modal.style.display === 'block') {
                this.modal.style.display = 'none';
            }
        });
    }
}


// Interactive Star Map Class
class StarMap {
    constructor() {
        this.canvas = document.getElementById('starMap');
        if (!this.canvas) return;

        this.ctx = this.canvas.getContext('2d');
        this.stars = [];
        this.constellations = [];
        this.animating = false;
        this.selectedStar = null;

        this.init();
        this.createStars();
        this.createConstellations();
        this.animate();

        // Add click handler
        this.canvas.addEventListener('click', (e) => this.handleClick(e));
        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));
    }

    init() {
        this.resize();
        window.addEventListener('resize', () => this.resize());
    }

    resize() {
        this.canvas.width = this.canvas.offsetWidth;
        this.canvas.height = this.canvas.offsetHeight;
    }

    createStars() {
        const starCount = 150;

        for (let i = 0; i < starCount; i++) {
            this.stars.push({
                x: Math.random() * this.canvas.width,
                y: Math.random() * this.canvas.height,
                radius: Math.random() * 2 + 0.5,
                brightness: Math.random(),
                twinkleSpeed: Math.random() * 0.02 + 0.01,
                constellation: Math.floor(Math.random() * 12),
                interactive: Math.random() > 0.7 // 30% of stars are interactive
            });
        }
    }

    createConstellations() {
        const constellationNames = [
            '–í–µ–ª–∏–∫–∞ –í–µ–¥–º–µ–¥–∏—Ü—è', '–ú–∞–ª–∞ –í–µ–¥–º–µ–¥–∏—Ü—è', '–û—Ä—ñ–æ–Ω', '–ö–∞—Å—Å—ñ–æ–ø–µ—è',
            '–í–µ–ª–∏–∫–∏–π –ü–µ—Å', '–ú–∞–ª–∏–π –ü–µ—Å', '–ë–ª–∏–∑–Ω—è—Ç–∞', '–†–∞–∫', '–õ–µ–≤', '–î—ñ–≤–∞',
            '–¢–µ—Ä–µ–∑–∏', '–°–∫–æ—Ä–ø—ñ–æ–Ω'
        ];

        const predictions = [
            'üåü –°–∏–ª–∞ —Ç–∞ –º—É–¥—Ä—ñ—Å—Ç—å –±—É–¥—É—Ç—å –∑ –≤–∞–º–∏!',
            '‚ú® –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–∫—Ä–∏—é—Ç—å—Å—è —Å–∫–æ—Ä–æ!',
            'üîÆ –í–∞—à—ñ –º—Ä—ñ—ó —Å—Ç–∞–Ω—É—Ç—å —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—é!',
            'üí´ –ï–Ω–µ—Ä–≥—ñ—è —É—Å–ø—ñ—Ö—É –æ—Ç–æ—á—É—î –≤–∞—Å!',
            'üåô –ß–∞—Å –¥–ª—è –∑–º—ñ–Ω –Ω–∞—Å—Ç–∞–≤!',
            '‚≠ê –õ—é–±–æ–≤ –∑–Ω–∞–π–¥–µ –≤–∞—Å —É –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–º—É –º—ñ—Å—Ü—ñ!',
            'üåå –í–µ–ª–∏–∫—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥—É!',
            'üéØ –í–∞—à–∞ –º–µ—Ç–∞ –±—É–¥–µ –¥–æ—Å—è–≥–Ω—É—Ç–∞!',
            'üå† –ß—É–¥–µ—Å–∞ —Ç—Ä–∞–ø–ª—è—é—Ç—å—Å—è —â–æ–¥–Ω—è!',
            'üíé –í–∞—à —Ç–∞–ª–∞–Ω—Ç –±—É–¥–µ —Ä–æ–∑–∫—Ä–∏—Ç–∏–π!',
            'üåà –©–∞—Å—Ç—è –ø—Ä–∏–π–¥–µ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω!',
            'üé™ –ñ–∏—Ç—Ç—è –±—É–¥–µ —è—Å–∫—Ä–∞–≤–∏–º —Ç–∞ –Ω–∞—Å–∏—á–µ–Ω–∏–º!'
        ];

        for (let i = 0; i < constellationNames.length; i++) {
            this.constellations.push({
                name: constellationNames[i],
                prediction: predictions[i],
                stars: this.stars.filter(star => star.constellation === i).slice(0, 5)
            });
        }
    }

    animate() {
        if (!this.animating) {
            this.animating = true;
            this.draw();
        }
    }

    draw() {
        // Clear canvas with slight trail effect
        this.ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw constellations connections
        this.drawConstellations();

        // Draw stars
        this.drawStars();

        requestAnimationFrame(() => this.draw());
    }

    drawConstellations() {
        this.ctx.strokeStyle = 'rgba(147, 197, 253, 0.3)';
        this.ctx.lineWidth = 1;

        this.constellations.forEach(constellation => {
            if (constellation.stars.length > 1) {
                this.ctx.beginPath();
                this.ctx.moveTo(constellation.stars[0].x, constellation.stars[0].y);

                for (let i = 1; i < constellation.stars.length; i++) {
                    this.ctx.lineTo(constellation.stars[i].x, constellation.stars[i].y);
                }

                this.ctx.stroke();
            }
        });
    }

    drawStars() {
        this.stars.forEach((star, index) => {
            // Update brightness for twinkling effect
            star.brightness += star.twinkleSpeed;
            if (star.brightness > 1) star.brightness = 0;

            const alpha = 0.3 + (Math.sin(star.brightness * Math.PI * 2) + 1) * 0.4;

            // Draw star glow
            const gradient = this.ctx.createRadialGradient(
                star.x, star.y, 0,
                star.x, star.y, star.radius * 4
            );
            gradient.addColorStop(0, `rgba(255, 255, 255, ${alpha})`);
            gradient.addColorStop(0.5, `rgba(147, 197, 253, ${alpha * 0.5})`);
            gradient.addColorStop(1, 'rgba(147, 197, 253, 0)');

            this.ctx.fillStyle = gradient;
            this.ctx.beginPath();
            this.ctx.arc(star.x, star.y, star.radius * 4, 0, Math.PI * 2);
            this.ctx.fill();

            // Draw star core
            this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha + 0.3})`;
            this.ctx.beginPath();
            this.ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
            this.ctx.fill();

            // Highlight interactive stars
            if (star.interactive) {
                this.ctx.strokeStyle = `rgba(255, 215, 0, ${alpha * 0.8})`;
                this.ctx.lineWidth = 1;
                this.ctx.stroke();
            }
        });
    }

    handleClick(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        // Find clicked star
        const clickedStar = this.stars.find(star => {
            const distance = Math.sqrt((star.x - x) ** 2 + (star.y - y) ** 2);
            return distance < star.radius * 6 && star.interactive;
        });

        if (clickedStar) {
            this.selectedStar = clickedStar;
            this.showConstellationInfo(clickedStar);
            this.createClickEffect(x, y);
        }
    }

    handleMouseMove(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        // Check if hovering over interactive star
        const hoveredStar = this.stars.find(star => {
            const distance = Math.sqrt((star.x - x) ** 2 + (star.y - y) ** 2);
            return distance < star.radius * 6 && star.interactive;
        });

        this.canvas.style.cursor = hoveredStar ? 'pointer' : 'default';
    }

    showConstellationInfo(star) {
        const info = document.getElementById('constellationInfo');
        const constellation = this.constellations[star.constellation];

        if (info && constellation) {
            info.querySelector('.constellation-name').textContent = constellation.name;
            info.querySelector('.constellation-prediction').textContent = constellation.prediction;

            // Add glow effect
            info.style.animation = 'none';
            setTimeout(() => {
                info.style.animation = 'glow 2s ease-in-out';
            }, 10);
        }
    }

    createClickEffect(x, y) {
        // Create particle explosion
        for (let i = 0; i < 20; i++) {
            const particle = {
                x: x,
                y: y,
                vx: (Math.random() - 0.5) * 10,
                vy: (Math.random() - 0.5) * 10,
                life: 60,
                color: `hsl(${Math.random() * 60 + 200}, 70%, 60%)`
            };

            this.animateParticle(particle);
        }
    }

    animateParticle(particle) {
        if (particle.life <= 0) return;

        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.vy += 0.1; // gravity
        particle.life--;

        this.ctx.fillStyle = particle.color;
        this.ctx.globalAlpha = particle.life / 60;
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);
        this.ctx.fill();
        this.ctx.globalAlpha = 1;

        requestAnimationFrame(() => this.animateParticle(particle));
    }
}


// Magic Particles Background
class MagicParticles {
    constructor() {
        this.canvas = document.createElement('canvas');
        this.canvas.className = 'magic-particles';
        this.ctx = this.canvas.getContext('2d');
        this.particles = [];
        this.mouse = { x: 0, y: 0 };

        document.body.appendChild(this.canvas);
        this.init();
        this.createParticles();
        this.animate();

        document.addEventListener('mousemove', (e) => {
            this.mouse.x = e.clientX;
            this.mouse.y = e.clientY;
        });
    }

    init() {
        this.resize();
        window.addEventListener('resize', () => this.resize());
    }

    resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }

    createParticles() {
        const particleCount = 50;

        for (let i = 0; i < particleCount; i++) {
            this.particles.push({
                x: Math.random() * this.canvas.width,
                y: Math.random() * this.canvas.height,
                vx: (Math.random() - 0.5) * 0.5,
                vy: (Math.random() - 0.5) * 0.5,
                size: Math.random() * 3 + 1,
                life: Math.random() * 100 + 50,
                maxLife: 150,
                color: this.getRandomColor(),
                energy: Math.random()
            });
        }
    }

    getRandomColor() {
        const colors = [
            'rgba(147, 197, 253, 0.6)', // Blue
            'rgba(168, 85, 247, 0.6)',  // Purple
            'rgba(236, 72, 153, 0.6)',  // Pink
            'rgba(34, 197, 94, 0.6)',   // Green
            'rgba(251, 191, 36, 0.6)'   // Yellow
        ];
        return colors[Math.floor(Math.random() * colors.length)];
    }

    animate() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        this.particles.forEach((particle, index) => {
            // Update position
            particle.x += particle.vx;
            particle.y += particle.vy;

            // Mouse interaction
            const dx = this.mouse.x - particle.x;
            const dy = this.mouse.y - particle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < 100) {
                particle.vx += dx * 0.0001;
                particle.vy += dy * 0.0001;
            }

            // Boundary check
            if (particle.x < 0 || particle.x > this.canvas.width) particle.vx *= -1;
            if (particle.y < 0 || particle.y > this.canvas.height) particle.vy *= -1;

            // Update life
            particle.life--;
            if (particle.life <= 0) {
                particle.x = Math.random() * this.canvas.width;
                particle.y = Math.random() * this.canvas.height;
                particle.life = particle.maxLife;
                particle.color = this.getRandomColor();
            }

            // Draw particle
            const alpha = particle.life / particle.maxLife;
            this.ctx.globalAlpha = alpha;

            // Draw energy field
            const gradient = this.ctx.createRadialGradient(
                particle.x, particle.y, 0,
                particle.x, particle.y, particle.size * 3
            );
            gradient.addColorStop(0, particle.color);
            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');

            this.ctx.fillStyle = gradient;
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);
            this.ctx.fill();

            // Draw core
            this.ctx.fillStyle = particle.color;
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            this.ctx.fill();

            this.ctx.globalAlpha = 1;
        });

        requestAnimationFrame(() => this.animate());
    }
}


// Interactive Tarot Cards
class TarotCards {
    constructor() {
        this.deck = document.getElementById('tarotDeck');
        this.result = document.getElementById('tarotResult');
        this.message = document.getElementById('tarotMessage');
        this.selectedCard = null;

        if (this.deck) {
            this.init();
        }
    }

    init() {
        const cards = this.deck.querySelectorAll('.tarot-card');
        cards.forEach((card, index) => {
            card.addEventListener('click', () => this.selectCard(card, index));
        });

        // Add floating animation
        this.animateCards();
    }

    selectCard(card, index) {
        if (this.selectedCard) return; // Only one card per session

        this.selectedCard = card;
        card.classList.add('selected');

        // Flip animation
        setTimeout(() => {
            card.querySelector('.card-inner').classList.add('flipped');
        }, 500);

        // Show result
        setTimeout(() => {
            this.showResult(index);
        }, 1500);
    }

    showResult(index) {
        const predictions = [
            'üåü –°–∏–ª–∞ —Ç–∞ –º—É–¥—Ä—ñ—Å—Ç—å –±—É–¥—É—Ç—å –∑ –≤–∞–º–∏! –í–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –Ω–æ–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤, —è–∫—ñ –ø—Ä–∏–Ω–µ—Å—É—Ç—å –≤–∞–º –≥–ª–∏–±–æ–∫–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Å–µ–±–µ.',
            'üåô –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–∫—Ä–∏—é—Ç—å—Å—è —Å–∫–æ—Ä–æ! –ú—ñ—Å—è—Ü—å –ø—Ä–∏–Ω–µ—Å–µ –≤–∞–º –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—ñ —Å—é—Ä–ø—Ä–∏–∑–∏ —Ç–∞ –Ω–æ–≤—ñ —à–ª—è—Ö–∏ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É.',
            'üîÆ –í–∞—à—ñ –º—Ä—ñ—ó —Å—Ç–∞–Ω—É—Ç—å —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—é! –ó—ñ—Ä–∫–∏ –≤–∏—à–∏–∫—É–≤–∞–ª–∏—Å—è —Ç–∞–∫, —â–æ–± –≤–∞—à—ñ –±–∞–∂–∞–Ω–Ω—è –∑–¥—ñ–π—Å–Ω–∏–ª–∏—Å—è –≤ –Ω–∞–π–±–ª–∏–∂—á–æ–º—É –º–∞–π–±—É—Ç–Ω—å–æ–º—É.',
            'üí´ –ï–Ω–µ—Ä–≥—ñ—è —É—Å–ø—ñ—Ö—É –æ—Ç–æ—á—É—î –≤–∞—Å! –í–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É –¥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Å–≤–æ—ó—Ö —Ü—ñ–ª–µ–π.',
            'üåô –ß–∞—Å –¥–ª—è –∑–º—ñ–Ω –Ω–∞—Å—Ç–∞–≤! –°—Ç–∞—Ä–µ –≤—ñ–¥—Ö–æ–¥–∏—Ç—å, —â–æ–± –¥–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–æ–≤–æ–º—É —Ç–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É.',
            '‚≠ê –õ—é–±–æ–≤ –∑–Ω–∞–π–¥–µ –≤–∞—Å —É –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–º—É –º—ñ—Å—Ü—ñ! –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–≤–æ—î —Å–µ—Ä—Ü–µ –¥–ª—è –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.',
            'üåå –í–µ–ª–∏–∫—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥—É! –í–∞—à—ñ –∑—É—Å–∏–ª–ª—è –±—É–¥—É—Ç—å –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω—ñ –ø–æ –∑–∞—Å–ª—É–≥–∞—Ö.',
            'üéØ –í–∞—à–∞ –º–µ—Ç–∞ –±—É–¥–µ –¥–æ—Å—è–≥–Ω—É—Ç–∞! –ó–æ—Å–µ—Ä–µ–¥—å—Ç–µ—Å—è –Ω–∞ —Å–≤–æ—ó—Ö —Ü—ñ–ª—è—Ö —Ç–∞ –π–¥—ñ—Ç—å –≤–ø–µ—Ä–µ–¥.',
            'üå† –ß—É–¥–µ—Å–∞ —Ç—Ä–∞–ø–ª—è—é—Ç—å—Å—è —â–æ–¥–Ω—è! –ù–∞–≤—á—ñ—Ç—å—Å—è —ó—Ö –ø–æ–º—ñ—á–∞—Ç–∏ —Ç–∞ —Ü—ñ–Ω—É–≤–∞—Ç–∏.',
            'üíé –í–∞—à —Ç–∞–ª–∞–Ω—Ç –±—É–¥–µ —Ä–æ–∑–∫—Ä–∏—Ç–∏–π! –ß–∞—Å –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º–∏ –¥–∞—Ä–∞–º–∏ –∑—ñ —Å–≤—ñ—Ç–æ–º.',
            'üåà –©–∞—Å—Ç—è –ø—Ä–∏–π–¥–µ –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω! –ë—É–¥—å—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –¥–æ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.',
            'üé™ –ñ–∏—Ç—Ç—è –±—É–¥–µ —è—Å–∫—Ä–∞–≤–∏–º —Ç–∞ –Ω–∞—Å–∏—á–µ–Ω–∏–º! –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ—Ö –ø—Ä–∏–≥–æ–¥!'
        ];

        this.message.textContent = predictions[index % predictions.length];
        this.result.style.display = 'block';

        // Scroll to result
        this.result.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    animateCards() {
        const cards = this.deck.querySelectorAll('.tarot-card');

        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.2}s`;
            card.classList.add('floating');
        });
    }
}


// Interactive Zodiac Wheel
class ZodiacWheel {
    constructor() {
        this.canvas = document.getElementById('zodiacWheel');
        if (!this.canvas) return;

        this.ctx = this.canvas.getContext('2d');
        this.centerX = this.canvas.width / 2;
        this.centerY = this.canvas.height / 2;
        this.radius = 150;
        this.selectedSign = null;

        this.zodiacSigns = [
            { name: '–û–≤–µ–Ω', symbol: '‚ôà', dates: '21 –±–µ—Ä–µ–∑–Ω—è - 19 –∫–≤—ñ—Ç–Ω—è', angle: 0 },
            { name: '–¢–µ–ª–µ—Ü—å', symbol: '‚ôâ', dates: '20 –∫–≤—ñ—Ç–Ω—è - 20 —Ç—Ä–∞–≤–Ω—è', angle: 30 },
            { name: '–ë–ª–∏–∑–Ω—è—Ç–∞', symbol: '‚ôä', dates: '21 —Ç—Ä–∞–≤–Ω—è - 20 —á–µ—Ä–≤–Ω—è', angle: 60 },
            { name: '–†–∞–∫', symbol: '‚ôã', dates: '21 —á–µ—Ä–≤–Ω—è - 22 –ª–∏–ø–Ω—è', angle: 90 },
            { name: '–õ–µ–≤', symbol: '‚ôå', dates: '23 –ª–∏–ø–Ω—è - 22 —Å–µ—Ä–ø–Ω—è', angle: 120 },
            { name: '–î—ñ–≤–∞', symbol: '‚ôç', dates: '23 —Å–µ—Ä–ø–Ω—è - 22 –≤–µ—Ä–µ—Å–Ω—è', angle: 150 },
            { name: '–¢–µ—Ä–µ–∑–∏', symbol: '‚ôé', dates: '23 –≤–µ—Ä–µ—Å–Ω—è - 22 –∂–æ–≤—Ç–Ω—è', angle: 180 },
            { name: '–°–∫–æ—Ä–ø—ñ–æ–Ω', symbol: '‚ôè', dates: '23 –∂–æ–≤—Ç–Ω—è - 21 –ª–∏—Å—Ç–æ–ø–∞–¥–∞', angle: 210 },
            { name: '–°—Ç—Ä—ñ–ª–µ—Ü—å', symbol: '‚ôê', dates: '22 –ª–∏—Å—Ç–æ–ø–∞–¥–∞ - 21 –≥—Ä—É–¥–Ω—è', angle: 240 },
            { name: '–ö–æ–∑–µ—Ä—ñ–≥', symbol: '‚ôë', dates: '22 –≥—Ä—É–¥–Ω—è - 19 —Å—ñ—á–Ω—è', angle: 270 },
            { name: '–í–æ–¥–æ–ª—ñ–π', symbol: '‚ôí', dates: '20 —Å—ñ—á–Ω—è - 18 –ª—é—Ç–æ–≥–æ', angle: 300 },
            { name: '–†–∏–±–∏', symbol: '‚ôì', dates: '19 –ª—é—Ç–æ–≥–æ - 20 –±–µ—Ä–µ–∑–Ω—è', angle: 330 }
        ];

        this.predictions = [
            'üåü –ï–Ω–µ—Ä–≥—ñ—è –≤–æ–≥–Ω—é –Ω–∞–ø–æ–≤–Ω—é—î –≤–∞—Å! –ß–∞—Å –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ—á–∏–Ω–∞–Ω—å —Ç–∞ —Å–º—ñ–ª–∏–≤–∏—Ö —Ä—ñ—à–µ–Ω—å.',
            'üå± –ó–µ–º–Ω–∞ —Å–∏–ª–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∞–º –±—É–¥—É–≤–∞—Ç–∏ –º—ñ—Ü–Ω—ñ –æ—Å–Ω–æ–≤–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ.',
            'üí® –ü–æ–≤—ñ—Ç—Ä—è –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤–∞–º –Ω–æ–≤—ñ —ñ–¥–µ—ó —Ç–∞ —Ü—ñ–∫–∞–≤—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ.',
            'üåä –í–æ–¥–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –≥–ª–∏–±–∏–Ω—É –µ–º–æ—Ü—ñ–π —Ç–∞ —ñ–Ω—Ç—É—ó—Ü—ñ—ó.',
            '‚òÄÔ∏è –°–æ–Ω—Ü–µ –ø—ñ–¥—Å–≤—ñ—á—É—î –≤–∞—à—É —Ö–∞—Ä–∏–∑–º—É —Ç–∞ –ª—ñ–¥–µ—Ä—Å—å–∫—ñ —è–∫–æ—Å—Ç—ñ.',
            'üåæ –ü—Ä–∏—Ä–æ–¥–∞ –Ω–∞–≥–æ—Ä–æ–¥–∂—É—î –≤–∞—Å –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ä–∞–Ω–Ω—ñ—Å—Ç—å.',
            '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –¥–æ–ø–æ–º–∞–≥–∞—î –∑–Ω–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω—ñ—é –≤ —É—Å—ñ—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏—Ç—Ç—è.',
            'ü¶Ç –ì–ª–∏–±–∏–Ω–∞ —Ç–∞ —Å–∏–ª–∞ –≤–µ–¥—É—Ç—å –≤–∞—Å –¥–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó.',
            'üèπ –°–≤–æ–±–æ–¥–∞ —Ç–∞ –ø—Ä–∏–≥–æ–¥–∏ —á–µ–∫–∞—é—Ç—å –Ω–∞ –≤–∞—Å –ø–æ–ø–µ—Ä–µ–¥—É.',
            '‚õ∞Ô∏è –ê–º–±—ñ—Ü—ñ—ó —Ç–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –ø—Ä–∏–≤–µ–¥—É—Ç—å –¥–æ —É—Å–ø—ñ—Ö—É.',
            'üí° –Ü–Ω–Ω–æ–≤–∞—Ü—ñ—ó —Ç–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.',
            'üåä –°–ø—ñ–≤—á—É—Ç—Ç—è —Ç–∞ —Ç–≤–æ—Ä—á—ñ—Å—Ç—å –Ω–∞–ø–æ–≤–Ω—é—é—Ç—å –≤–∞—à–µ –∂–∏—Ç—Ç—è.'
        ];

        this.init();
        this.animate();
    }

    init() {
        this.canvas.addEventListener('click', (e) => this.handleClick(e));
        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));
    }

    handleClick(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left - this.centerX;
        const y = e.clientY - rect.top - this.centerY;
        const distance = Math.sqrt(x * x + y * y);

        if (distance <= this.radius && distance >= this.radius * 0.3) {
            const angle = Math.atan2(y, x) * 180 / Math.PI;
            const normalizedAngle = (angle + 360) % 360;
            const signIndex = Math.floor(normalizedAngle / 30);

            this.selectSign(signIndex);
        }
    }

    handleMouseMove(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left - this.centerX;
        const y = e.clientY - rect.top - this.centerY;
        const distance = Math.sqrt(x * x + y * y);

        if (distance <= this.radius && distance >= this.radius * 0.3) {
            this.canvas.style.cursor = 'pointer';
        } else {
            this.canvas.style.cursor = 'default';
        }
    }

    selectSign(index) {
        this.selectedSign = index;
        this.updateZodiacInfo();
        this.animate();
    }

    updateZodiacInfo() {
        if (this.selectedSign === null) return;

        const sign = this.zodiacSigns[this.selectedSign];
        const prediction = this.predictions[this.selectedSign];

        document.getElementById('zodiacSymbol').textContent = sign.symbol;
        document.getElementById('zodiacName').textContent = sign.name;
        document.getElementById('zodiacPrediction').textContent = prediction;
        document.getElementById('zodiacDates').textContent = sign.dates;
    }

    animate() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw outer ring
        this.ctx.beginPath();
        this.ctx.arc(this.centerX, this.centerY, this.radius, 0, Math.PI * 2);
        this.ctx.strokeStyle = 'rgba(139, 92, 246, 0.3)';
        this.ctx.lineWidth = 3;
        this.ctx.stroke();

        // Draw inner ring
        this.ctx.beginPath();
        this.ctx.arc(this.centerX, this.centerY, this.radius * 0.3, 0, Math.PI * 2);
        this.ctx.strokeStyle = 'rgba(139, 92, 246, 0.5)';
        this.ctx.lineWidth = 2;
        this.ctx.stroke();

        // Draw zodiac signs
        this.zodiacSigns.forEach((sign, index) => {
            const angle = (sign.angle * Math.PI) / 180;
            const x = this.centerX + Math.cos(angle) * (this.radius * 0.7);
            const y = this.centerY + Math.sin(angle) * (this.radius * 0.7);

            // Highlight selected sign
            if (this.selectedSign === index) {
                this.ctx.beginPath();
                this.ctx.arc(x, y, 25, 0, Math.PI * 2);
                this.ctx.fillStyle = 'rgba(251, 191, 36, 0.3)';
                this.ctx.fill();

                this.ctx.beginPath();
                this.ctx.arc(x, y, 22, 0, Math.PI * 2);
                this.ctx.strokeStyle = 'rgba(251, 191, 36, 0.8)';
                this.ctx.lineWidth = 2;
                this.ctx.stroke();
            }

            // Draw sign symbol
            this.ctx.fillStyle = this.selectedSign === index ? '#fbbf24' : 'rgba(255, 255, 255, 0.8)';
            this.ctx.font = '20px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.textBaseline = 'middle';
            this.ctx.fillText(sign.symbol, x, y);

            // Draw sign name
            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
            this.ctx.font = '12px Arial';
            this.ctx.fillText(sign.name, x, y + 35);
        });

        // Draw connecting lines
        this.ctx.strokeStyle = 'rgba(139, 92, 246, 0.2)';
        this.ctx.lineWidth = 1;

        for (let i = 0; i < 12; i++) {
            const angle = (i * 30 * Math.PI) / 180;
            const x1 = this.centerX + Math.cos(angle) * (this.radius * 0.3);
            const y1 = this.centerY + Math.sin(angle) * (this.radius * 0.3);
            const x2 = this.centerX + Math.cos(angle) * this.radius;
            const y2 = this.centerY + Math.sin(angle) * this.radius;

            this.ctx.beginPath();
            this.ctx.moveTo(x1, y1);
            this.ctx.lineTo(x2, y2);
            this.ctx.stroke();
        }
    }
}


// Global function for shuffling tarot cards
function shuffleTarot() {
    const cards = document.querySelectorAll('.tarot-card');
    const result = document.getElementById('tarotResult');

    // Reset all cards
    cards.forEach(card => {
        card.classList.remove('selected');
        card.querySelector('.card-inner').classList.remove('flipped');
    });

    // Hide result
    result.style.display = 'none';

    // Reset selected card
    const tarotInstance = window.tarotInstance;
    if (tarotInstance) {
        tarotInstance.selectedCard = null;
    }
}


// Floating Astrology Symbols
class FloatingSymbols {
    constructor() {
        this.symbols = ['‚òæ', '‚òΩ', '‚òø', '‚ôÄ', '‚ôÇ', '‚ôÉ', '‚ôÑ', '‚õ¢', '‚ôÖ', '‚ôÜ', '‚ôá'];
        this.elements = [];
        this.createSymbols();
        this.animate();
    }

    createSymbols() {
        for (let i = 0; i < 15; i++) {
            const symbol = document.createElement('div');
            symbol.className = 'floating-symbol';
            symbol.textContent = this.symbols[Math.floor(Math.random() * this.symbols.length)];
            symbol.style.left = Math.random() * 100 + 'vw';
            symbol.style.animationDelay = Math.random() * 10 + 's';
            symbol.style.fontSize = (Math.random() * 20 + 20) + 'px';

            document.body.appendChild(symbol);
            this.elements.push(symbol);
        }
    }

    animate() {
        this.elements.forEach((symbol, index) => {
            symbol.style.animation = `floatSymbol ${8 + Math.random() * 4}s ease-in-out infinite`;
            symbol.style.animationDelay = `${index * 0.5}s`;
        });
    }
}




